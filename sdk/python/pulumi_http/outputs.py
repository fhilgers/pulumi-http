# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'Header',
    'Request',
    'Response',
]

@pulumi.output_type
class Header(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class Request(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedStatusCode":
            suggest = "expected_status_code"
        elif key == "insecureSkipVerify":
            suggest = "insecure_skip_verify"
        elif key == "maxRetries":
            suggest = "max_retries"
        elif key == "retryWaitMax":
            suggest = "retry_wait_max"
        elif key == "retryWaitMin":
            suggest = "retry_wait_min"
        elif key == "rootCAs":
            suggest = "root_cas"
        elif key == "serverName":
            suggest = "server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Request. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Request.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Request.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 url: str,
                 body: Optional[str] = None,
                 certificates: Optional[Sequence[str]] = None,
                 expected_status_code: Optional[float] = None,
                 header: Optional['outputs.Header'] = None,
                 insecure_skip_verify: Optional[bool] = None,
                 max_retries: Optional[float] = None,
                 retry_wait_max: Optional[float] = None,
                 retry_wait_min: Optional[float] = None,
                 root_cas: Optional[Sequence[str]] = None,
                 server_name: Optional[str] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "url", url)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if expected_status_code is not None:
            pulumi.set(__self__, "expected_status_code", expected_status_code)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if insecure_skip_verify is not None:
            pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if retry_wait_max is not None:
            pulumi.set(__self__, "retry_wait_max", retry_wait_max)
        if retry_wait_min is not None:
            pulumi.set(__self__, "retry_wait_min", retry_wait_min)
        if root_cas is not None:
            pulumi.set(__self__, "root_cas", root_cas)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def certificates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="expectedStatusCode")
    def expected_status_code(self) -> Optional[float]:
        return pulumi.get(self, "expected_status_code")

    @property
    @pulumi.getter
    def header(self) -> Optional['outputs.Header']:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> Optional[bool]:
        return pulumi.get(self, "insecure_skip_verify")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[float]:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="retryWaitMax")
    def retry_wait_max(self) -> Optional[float]:
        return pulumi.get(self, "retry_wait_max")

    @property
    @pulumi.getter(name="retryWaitMin")
    def retry_wait_min(self) -> Optional[float]:
        return pulumi.get(self, "retry_wait_min")

    @property
    @pulumi.getter(name="rootCAs")
    def root_cas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "root_cas")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")


@pulumi.output_type
class Response(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Response. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Response.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Response.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: str,
                 header: 'outputs.Header',
                 status: str,
                 status_code: int):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def header(self) -> 'outputs.Header':
        return pulumi.get(self, "header")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")


