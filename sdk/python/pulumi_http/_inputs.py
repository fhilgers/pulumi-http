# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'HeaderArgs',
    'RequestArgs',
]

@pulumi.input_type
class HeaderArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class RequestArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 url: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expected_status_code: Optional[pulumi.Input[float]] = None,
                 header: Optional[pulumi.Input['HeaderArgs']] = None,
                 insecure_skip_verify: Optional[pulumi.Input[bool]] = None,
                 max_retries: Optional[pulumi.Input[float]] = None,
                 retry_wait_max: Optional[pulumi.Input[float]] = None,
                 retry_wait_min: Optional[pulumi.Input[float]] = None,
                 root_cas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "url", url)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if expected_status_code is not None:
            pulumi.set(__self__, "expected_status_code", expected_status_code)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if insecure_skip_verify is not None:
            pulumi.set(__self__, "insecure_skip_verify", insecure_skip_verify)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if retry_wait_max is not None:
            pulumi.set(__self__, "retry_wait_max", retry_wait_max)
        if retry_wait_min is not None:
            pulumi.set(__self__, "retry_wait_min", retry_wait_min)
        if root_cas is not None:
            pulumi.set(__self__, "root_cas", root_cas)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="expectedStatusCode")
    def expected_status_code(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "expected_status_code")

    @expected_status_code.setter
    def expected_status_code(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "expected_status_code", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['HeaderArgs']]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['HeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="insecureSkipVerify")
    def insecure_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure_skip_verify")

    @insecure_skip_verify.setter
    def insecure_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_skip_verify", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="retryWaitMax")
    def retry_wait_max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "retry_wait_max")

    @retry_wait_max.setter
    def retry_wait_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "retry_wait_max", value)

    @property
    @pulumi.getter(name="retryWaitMin")
    def retry_wait_min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "retry_wait_min")

    @retry_wait_min.setter
    def retry_wait_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "retry_wait_min", value)

    @property
    @pulumi.getter(name="rootCAs")
    def root_cas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "root_cas")

    @root_cas.setter
    def root_cas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "root_cas", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


