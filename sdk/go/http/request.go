// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package http

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Request struct {
	pulumi.CustomResourceState

	Create   RequestTypePtrOutput `pulumi:"create"`
	Delete   RequestTypePtrOutput `pulumi:"delete"`
	Response ResponseOutput       `pulumi:"response"`
}

// NewRequest registers a new resource with the given unique name, arguments, and options.
func NewRequest(ctx *pulumi.Context,
	name string, args *RequestArgs, opts ...pulumi.ResourceOption) (*Request, error) {
	if args == nil {
		args = &RequestArgs{}
	}

	var resource Request
	err := ctx.RegisterResource("http:index:Request", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRequest gets an existing Request resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RequestState, opts ...pulumi.ResourceOption) (*Request, error) {
	var resource Request
	err := ctx.ReadResource("http:index:Request", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Request resources.
type requestState struct {
}

type RequestState struct {
}

func (RequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*requestState)(nil)).Elem()
}

type requestArgs struct {
	Create *RequestType `pulumi:"create"`
	Delete *RequestType `pulumi:"delete"`
}

// The set of arguments for constructing a Request resource.
type RequestArgs struct {
	Create RequestTypePtrInput
	Delete RequestTypePtrInput
}

func (RequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*requestArgs)(nil)).Elem()
}

type RequestInput interface {
	pulumi.Input

	ToRequestOutput() RequestOutput
	ToRequestOutputWithContext(ctx context.Context) RequestOutput
}

func (*Request) ElementType() reflect.Type {
	return reflect.TypeOf((*Request)(nil))
}

func (i *Request) ToRequestOutput() RequestOutput {
	return i.ToRequestOutputWithContext(context.Background())
}

func (i *Request) ToRequestOutputWithContext(ctx context.Context) RequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestOutput)
}

func (i *Request) ToRequestPtrOutput() RequestPtrOutput {
	return i.ToRequestPtrOutputWithContext(context.Background())
}

func (i *Request) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestPtrOutput)
}

type RequestPtrInput interface {
	pulumi.Input

	ToRequestPtrOutput() RequestPtrOutput
	ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput
}

type requestPtrType RequestArgs

func (*requestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Request)(nil))
}

func (i *requestPtrType) ToRequestPtrOutput() RequestPtrOutput {
	return i.ToRequestPtrOutputWithContext(context.Background())
}

func (i *requestPtrType) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestPtrOutput)
}

// RequestArrayInput is an input type that accepts RequestArray and RequestArrayOutput values.
// You can construct a concrete instance of `RequestArrayInput` via:
//
//          RequestArray{ RequestArgs{...} }
type RequestArrayInput interface {
	pulumi.Input

	ToRequestArrayOutput() RequestArrayOutput
	ToRequestArrayOutputWithContext(context.Context) RequestArrayOutput
}

type RequestArray []RequestInput

func (RequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Request)(nil)).Elem()
}

func (i RequestArray) ToRequestArrayOutput() RequestArrayOutput {
	return i.ToRequestArrayOutputWithContext(context.Background())
}

func (i RequestArray) ToRequestArrayOutputWithContext(ctx context.Context) RequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestArrayOutput)
}

// RequestMapInput is an input type that accepts RequestMap and RequestMapOutput values.
// You can construct a concrete instance of `RequestMapInput` via:
//
//          RequestMap{ "key": RequestArgs{...} }
type RequestMapInput interface {
	pulumi.Input

	ToRequestMapOutput() RequestMapOutput
	ToRequestMapOutputWithContext(context.Context) RequestMapOutput
}

type RequestMap map[string]RequestInput

func (RequestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Request)(nil)).Elem()
}

func (i RequestMap) ToRequestMapOutput() RequestMapOutput {
	return i.ToRequestMapOutputWithContext(context.Background())
}

func (i RequestMap) ToRequestMapOutputWithContext(ctx context.Context) RequestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestMapOutput)
}

type RequestOutput struct {
	*pulumi.OutputState
}

func (RequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Request)(nil))
}

func (o RequestOutput) ToRequestOutput() RequestOutput {
	return o
}

func (o RequestOutput) ToRequestOutputWithContext(ctx context.Context) RequestOutput {
	return o
}

func (o RequestOutput) ToRequestPtrOutput() RequestPtrOutput {
	return o.ToRequestPtrOutputWithContext(context.Background())
}

func (o RequestOutput) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return o.ApplyT(func(v Request) *Request {
		return &v
	}).(RequestPtrOutput)
}

type RequestPtrOutput struct {
	*pulumi.OutputState
}

func (RequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Request)(nil))
}

func (o RequestPtrOutput) ToRequestPtrOutput() RequestPtrOutput {
	return o
}

func (o RequestPtrOutput) ToRequestPtrOutputWithContext(ctx context.Context) RequestPtrOutput {
	return o
}

type RequestArrayOutput struct{ *pulumi.OutputState }

func (RequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Request)(nil))
}

func (o RequestArrayOutput) ToRequestArrayOutput() RequestArrayOutput {
	return o
}

func (o RequestArrayOutput) ToRequestArrayOutputWithContext(ctx context.Context) RequestArrayOutput {
	return o
}

func (o RequestArrayOutput) Index(i pulumi.IntInput) RequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Request {
		return vs[0].([]Request)[vs[1].(int)]
	}).(RequestOutput)
}

type RequestMapOutput struct{ *pulumi.OutputState }

func (RequestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Request)(nil))
}

func (o RequestMapOutput) ToRequestMapOutput() RequestMapOutput {
	return o
}

func (o RequestMapOutput) ToRequestMapOutputWithContext(ctx context.Context) RequestMapOutput {
	return o
}

func (o RequestMapOutput) MapIndex(k pulumi.StringInput) RequestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Request {
		return vs[0].(map[string]Request)[vs[1].(string)]
	}).(RequestOutput)
}

func init() {
	pulumi.RegisterOutputType(RequestOutput{})
	pulumi.RegisterOutputType(RequestPtrOutput{})
	pulumi.RegisterOutputType(RequestArrayOutput{})
	pulumi.RegisterOutputType(RequestMapOutput{})
}
