// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package http

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Certificate struct {
	Chain      []string `pulumi:"chain"`
	PrivateKey string   `pulumi:"privateKey"`
}

// CertificateInput is an input type that accepts CertificateArgs and CertificateOutput values.
// You can construct a concrete instance of `CertificateInput` via:
//
//          CertificateArgs{...}
type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(context.Context) CertificateOutput
}

type CertificateArgs struct {
	Chain      pulumi.StringArrayInput `pulumi:"chain"`
	PrivateKey pulumi.StringInput      `pulumi:"privateKey"`
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (i CertificateArgs) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i CertificateArgs) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) Chain() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Certificate) []string { return v.Chain }).(pulumi.StringArrayOutput)
}

func (o CertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v Certificate) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type Header struct {
}

// HeaderInput is an input type that accepts HeaderArgs and HeaderOutput values.
// You can construct a concrete instance of `HeaderInput` via:
//
//          HeaderArgs{...}
type HeaderInput interface {
	pulumi.Input

	ToHeaderOutput() HeaderOutput
	ToHeaderOutputWithContext(context.Context) HeaderOutput
}

type HeaderArgs struct {
}

func (HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (i HeaderArgs) ToHeaderOutput() HeaderOutput {
	return i.ToHeaderOutputWithContext(context.Background())
}

func (i HeaderArgs) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderOutput)
}

func (i HeaderArgs) ToHeaderPtrOutput() HeaderPtrOutput {
	return i.ToHeaderPtrOutputWithContext(context.Background())
}

func (i HeaderArgs) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderOutput).ToHeaderPtrOutputWithContext(ctx)
}

// HeaderPtrInput is an input type that accepts HeaderArgs, HeaderPtr and HeaderPtrOutput values.
// You can construct a concrete instance of `HeaderPtrInput` via:
//
//          HeaderArgs{...}
//
//  or:
//
//          nil
type HeaderPtrInput interface {
	pulumi.Input

	ToHeaderPtrOutput() HeaderPtrOutput
	ToHeaderPtrOutputWithContext(context.Context) HeaderPtrOutput
}

type headerPtrType HeaderArgs

func HeaderPtr(v *HeaderArgs) HeaderPtrInput {
	return (*headerPtrType)(v)
}

func (*headerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Header)(nil)).Elem()
}

func (i *headerPtrType) ToHeaderPtrOutput() HeaderPtrOutput {
	return i.ToHeaderPtrOutputWithContext(context.Background())
}

func (i *headerPtrType) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderPtrOutput)
}

type HeaderOutput struct{ *pulumi.OutputState }

func (HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (o HeaderOutput) ToHeaderOutput() HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderPtrOutput() HeaderPtrOutput {
	return o.ToHeaderPtrOutputWithContext(context.Background())
}

func (o HeaderOutput) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return o.ApplyT(func(v Header) *Header {
		return &v
	}).(HeaderPtrOutput)
}

type HeaderPtrOutput struct{ *pulumi.OutputState }

func (HeaderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Header)(nil)).Elem()
}

func (o HeaderPtrOutput) ToHeaderPtrOutput() HeaderPtrOutput {
	return o
}

func (o HeaderPtrOutput) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return o
}

func (o HeaderPtrOutput) Elem() HeaderOutput {
	return o.ApplyT(func(v *Header) Header { return *v }).(HeaderOutput)
}

type RequestType struct {
	Body               *string  `pulumi:"body"`
	Certificates       []string `pulumi:"certificates"`
	ExpectedStatusCode *float64 `pulumi:"expectedStatusCode"`
	Header             *Header  `pulumi:"header"`
	InsecureSkipVerify *bool    `pulumi:"insecureSkipVerify"`
	MaxRetries         *float64 `pulumi:"maxRetries"`
	Method             string   `pulumi:"method"`
	RetryWaitMax       *float64 `pulumi:"retryWaitMax"`
	RetryWaitMin       *float64 `pulumi:"retryWaitMin"`
	RootCAs            []string `pulumi:"rootCAs"`
	ServerName         *string  `pulumi:"serverName"`
	Url                string   `pulumi:"url"`
}

// RequestTypeInput is an input type that accepts RequestTypeArgs and RequestTypeOutput values.
// You can construct a concrete instance of `RequestTypeInput` via:
//
//          RequestTypeArgs{...}
type RequestTypeInput interface {
	pulumi.Input

	ToRequestTypeOutput() RequestTypeOutput
	ToRequestTypeOutputWithContext(context.Context) RequestTypeOutput
}

type RequestTypeArgs struct {
	Body               pulumi.StringPtrInput   `pulumi:"body"`
	Certificates       pulumi.StringArrayInput `pulumi:"certificates"`
	ExpectedStatusCode pulumi.Float64PtrInput  `pulumi:"expectedStatusCode"`
	Header             HeaderPtrInput          `pulumi:"header"`
	InsecureSkipVerify pulumi.BoolPtrInput     `pulumi:"insecureSkipVerify"`
	MaxRetries         pulumi.Float64PtrInput  `pulumi:"maxRetries"`
	Method             pulumi.StringInput      `pulumi:"method"`
	RetryWaitMax       pulumi.Float64PtrInput  `pulumi:"retryWaitMax"`
	RetryWaitMin       pulumi.Float64PtrInput  `pulumi:"retryWaitMin"`
	RootCAs            pulumi.StringArrayInput `pulumi:"rootCAs"`
	ServerName         pulumi.StringPtrInput   `pulumi:"serverName"`
	Url                pulumi.StringInput      `pulumi:"url"`
}

func (RequestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestType)(nil)).Elem()
}

func (i RequestTypeArgs) ToRequestTypeOutput() RequestTypeOutput {
	return i.ToRequestTypeOutputWithContext(context.Background())
}

func (i RequestTypeArgs) ToRequestTypeOutputWithContext(ctx context.Context) RequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestTypeOutput)
}

func (i RequestTypeArgs) ToRequestTypePtrOutput() RequestTypePtrOutput {
	return i.ToRequestTypePtrOutputWithContext(context.Background())
}

func (i RequestTypeArgs) ToRequestTypePtrOutputWithContext(ctx context.Context) RequestTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestTypeOutput).ToRequestTypePtrOutputWithContext(ctx)
}

// RequestTypePtrInput is an input type that accepts RequestTypeArgs, RequestTypePtr and RequestTypePtrOutput values.
// You can construct a concrete instance of `RequestTypePtrInput` via:
//
//          RequestTypeArgs{...}
//
//  or:
//
//          nil
type RequestTypePtrInput interface {
	pulumi.Input

	ToRequestTypePtrOutput() RequestTypePtrOutput
	ToRequestTypePtrOutputWithContext(context.Context) RequestTypePtrOutput
}

type requestTypePtrType RequestTypeArgs

func RequestTypePtr(v *RequestTypeArgs) RequestTypePtrInput {
	return (*requestTypePtrType)(v)
}

func (*requestTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestType)(nil)).Elem()
}

func (i *requestTypePtrType) ToRequestTypePtrOutput() RequestTypePtrOutput {
	return i.ToRequestTypePtrOutputWithContext(context.Background())
}

func (i *requestTypePtrType) ToRequestTypePtrOutputWithContext(ctx context.Context) RequestTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestTypePtrOutput)
}

type RequestTypeOutput struct{ *pulumi.OutputState }

func (RequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestType)(nil)).Elem()
}

func (o RequestTypeOutput) ToRequestTypeOutput() RequestTypeOutput {
	return o
}

func (o RequestTypeOutput) ToRequestTypeOutputWithContext(ctx context.Context) RequestTypeOutput {
	return o
}

func (o RequestTypeOutput) ToRequestTypePtrOutput() RequestTypePtrOutput {
	return o.ToRequestTypePtrOutputWithContext(context.Background())
}

func (o RequestTypeOutput) ToRequestTypePtrOutputWithContext(ctx context.Context) RequestTypePtrOutput {
	return o.ApplyT(func(v RequestType) *RequestType {
		return &v
	}).(RequestTypePtrOutput)
}
func (o RequestTypeOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestType) *string { return v.Body }).(pulumi.StringPtrOutput)
}

func (o RequestTypeOutput) Certificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RequestType) []string { return v.Certificates }).(pulumi.StringArrayOutput)
}

func (o RequestTypeOutput) ExpectedStatusCode() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RequestType) *float64 { return v.ExpectedStatusCode }).(pulumi.Float64PtrOutput)
}

func (o RequestTypeOutput) Header() HeaderPtrOutput {
	return o.ApplyT(func(v RequestType) *Header { return v.Header }).(HeaderPtrOutput)
}

func (o RequestTypeOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequestType) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o RequestTypeOutput) MaxRetries() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RequestType) *float64 { return v.MaxRetries }).(pulumi.Float64PtrOutput)
}

func (o RequestTypeOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v RequestType) string { return v.Method }).(pulumi.StringOutput)
}

func (o RequestTypeOutput) RetryWaitMax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RequestType) *float64 { return v.RetryWaitMax }).(pulumi.Float64PtrOutput)
}

func (o RequestTypeOutput) RetryWaitMin() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RequestType) *float64 { return v.RetryWaitMin }).(pulumi.Float64PtrOutput)
}

func (o RequestTypeOutput) RootCAs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RequestType) []string { return v.RootCAs }).(pulumi.StringArrayOutput)
}

func (o RequestTypeOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestType) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

func (o RequestTypeOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RequestType) string { return v.Url }).(pulumi.StringOutput)
}

type RequestTypePtrOutput struct{ *pulumi.OutputState }

func (RequestTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestType)(nil)).Elem()
}

func (o RequestTypePtrOutput) ToRequestTypePtrOutput() RequestTypePtrOutput {
	return o
}

func (o RequestTypePtrOutput) ToRequestTypePtrOutputWithContext(ctx context.Context) RequestTypePtrOutput {
	return o
}

func (o RequestTypePtrOutput) Elem() RequestTypeOutput {
	return o.ApplyT(func(v *RequestType) RequestType { return *v }).(RequestTypeOutput)
}

func (o RequestTypePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestType) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

func (o RequestTypePtrOutput) Certificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RequestType) []string {
		if v == nil {
			return nil
		}
		return v.Certificates
	}).(pulumi.StringArrayOutput)
}

func (o RequestTypePtrOutput) ExpectedStatusCode() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RequestType) *float64 {
		if v == nil {
			return nil
		}
		return v.ExpectedStatusCode
	}).(pulumi.Float64PtrOutput)
}

func (o RequestTypePtrOutput) Header() HeaderPtrOutput {
	return o.ApplyT(func(v *RequestType) *Header {
		if v == nil {
			return nil
		}
		return v.Header
	}).(HeaderPtrOutput)
}

func (o RequestTypePtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequestType) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func (o RequestTypePtrOutput) MaxRetries() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RequestType) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.Float64PtrOutput)
}

func (o RequestTypePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestType) *string {
		if v == nil {
			return nil
		}
		return &v.Method
	}).(pulumi.StringPtrOutput)
}

func (o RequestTypePtrOutput) RetryWaitMax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RequestType) *float64 {
		if v == nil {
			return nil
		}
		return v.RetryWaitMax
	}).(pulumi.Float64PtrOutput)
}

func (o RequestTypePtrOutput) RetryWaitMin() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RequestType) *float64 {
		if v == nil {
			return nil
		}
		return v.RetryWaitMin
	}).(pulumi.Float64PtrOutput)
}

func (o RequestTypePtrOutput) RootCAs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RequestType) []string {
		if v == nil {
			return nil
		}
		return v.RootCAs
	}).(pulumi.StringArrayOutput)
}

func (o RequestTypePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestType) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

func (o RequestTypePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestType) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type Response struct {
	Body       string `pulumi:"body"`
	Header     Header `pulumi:"header"`
	Status     string `pulumi:"status"`
	StatusCode int    `pulumi:"statusCode"`
}

// ResponseInput is an input type that accepts ResponseArgs and ResponseOutput values.
// You can construct a concrete instance of `ResponseInput` via:
//
//          ResponseArgs{...}
type ResponseInput interface {
	pulumi.Input

	ToResponseOutput() ResponseOutput
	ToResponseOutputWithContext(context.Context) ResponseOutput
}

type ResponseArgs struct {
	Body       pulumi.StringInput `pulumi:"body"`
	Header     HeaderInput        `pulumi:"header"`
	Status     pulumi.StringInput `pulumi:"status"`
	StatusCode pulumi.IntInput    `pulumi:"statusCode"`
}

func (ResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Response)(nil)).Elem()
}

func (i ResponseArgs) ToResponseOutput() ResponseOutput {
	return i.ToResponseOutputWithContext(context.Background())
}

func (i ResponseArgs) ToResponseOutputWithContext(ctx context.Context) ResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponseOutput)
}

func (i ResponseArgs) ToResponsePtrOutput() ResponsePtrOutput {
	return i.ToResponsePtrOutputWithContext(context.Background())
}

func (i ResponseArgs) ToResponsePtrOutputWithContext(ctx context.Context) ResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponseOutput).ToResponsePtrOutputWithContext(ctx)
}

// ResponsePtrInput is an input type that accepts ResponseArgs, ResponsePtr and ResponsePtrOutput values.
// You can construct a concrete instance of `ResponsePtrInput` via:
//
//          ResponseArgs{...}
//
//  or:
//
//          nil
type ResponsePtrInput interface {
	pulumi.Input

	ToResponsePtrOutput() ResponsePtrOutput
	ToResponsePtrOutputWithContext(context.Context) ResponsePtrOutput
}

type responsePtrType ResponseArgs

func ResponsePtr(v *ResponseArgs) ResponsePtrInput {
	return (*responsePtrType)(v)
}

func (*responsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Response)(nil)).Elem()
}

func (i *responsePtrType) ToResponsePtrOutput() ResponsePtrOutput {
	return i.ToResponsePtrOutputWithContext(context.Background())
}

func (i *responsePtrType) ToResponsePtrOutputWithContext(ctx context.Context) ResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsePtrOutput)
}

type ResponseOutput struct{ *pulumi.OutputState }

func (ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Response)(nil)).Elem()
}

func (o ResponseOutput) ToResponseOutput() ResponseOutput {
	return o
}

func (o ResponseOutput) ToResponseOutputWithContext(ctx context.Context) ResponseOutput {
	return o
}

func (o ResponseOutput) ToResponsePtrOutput() ResponsePtrOutput {
	return o.ToResponsePtrOutputWithContext(context.Background())
}

func (o ResponseOutput) ToResponsePtrOutputWithContext(ctx context.Context) ResponsePtrOutput {
	return o.ApplyT(func(v Response) *Response {
		return &v
	}).(ResponsePtrOutput)
}
func (o ResponseOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v Response) string { return v.Body }).(pulumi.StringOutput)
}

func (o ResponseOutput) Header() HeaderOutput {
	return o.ApplyT(func(v Response) Header { return v.Header }).(HeaderOutput)
}

func (o ResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v Response) string { return v.Status }).(pulumi.StringOutput)
}

func (o ResponseOutput) StatusCode() pulumi.IntOutput {
	return o.ApplyT(func(v Response) int { return v.StatusCode }).(pulumi.IntOutput)
}

type ResponsePtrOutput struct{ *pulumi.OutputState }

func (ResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Response)(nil)).Elem()
}

func (o ResponsePtrOutput) ToResponsePtrOutput() ResponsePtrOutput {
	return o
}

func (o ResponsePtrOutput) ToResponsePtrOutputWithContext(ctx context.Context) ResponsePtrOutput {
	return o
}

func (o ResponsePtrOutput) Elem() ResponseOutput {
	return o.ApplyT(func(v *Response) Response { return *v }).(ResponseOutput)
}

func (o ResponsePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Response) *string {
		if v == nil {
			return nil
		}
		return &v.Body
	}).(pulumi.StringPtrOutput)
}

func (o ResponsePtrOutput) Header() HeaderPtrOutput {
	return o.ApplyT(func(v *Response) *Header {
		if v == nil {
			return nil
		}
		return &v.Header
	}).(HeaderPtrOutput)
}

func (o ResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Response) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

func (o ResponsePtrOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Response) *int {
		if v == nil {
			return nil
		}
		return &v.StatusCode
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(HeaderOutput{})
	pulumi.RegisterOutputType(HeaderPtrOutput{})
	pulumi.RegisterOutputType(RequestTypeOutput{})
	pulumi.RegisterOutputType(RequestTypePtrOutput{})
	pulumi.RegisterOutputType(ResponseOutput{})
	pulumi.RegisterOutputType(ResponsePtrOutput{})
}
